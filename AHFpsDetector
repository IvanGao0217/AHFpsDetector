class AHFpsDetector: UILabel {
    var displayLink: CADisplayLink?
    var proxy: AHFpsDetectorProxy?
    var lastTimestamp: CFTimeInterval = 0
    var currentCount = 0

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.start()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func start() {
        let proxy = AHFpsDetectorProxy() { [weak self] in
            self?.trigger(timestamp: $0)
        }
        self.proxy = proxy
        self.displayLink = CADisplayLink(target: proxy, selector: #selector(proxy.trigger(link:)))
        self.displayLink?.add(to: .main, forMode: .common)
        self.addGestureRecognizer(UILongPressGestureRecognizer(target: self, action: #selector(stop)))
        self.isUserInteractionEnabled = true
        
        self.backgroundColor = .gray
        self.textColor = .white
    }
    
    @objc
    func stop() {
        self.displayLink?.invalidate()
        self.displayLink = nil
        self.proxy = nil
        self.removeFromSuperview()
    }
    
    private func trigger(timestamp: CFTimeInterval) {
        currentCount += 1
        let intervarl = timestamp - lastTimestamp
        if intervarl >= 1 {
            lastTimestamp = timestamp
            self.update(currentCount)
            currentCount = 0
        }
    }
    
    private func update(_ fps: Int) {
        let textColor = UIColor(hue: 0.27 * CGFloat(Double(fps) / 60 - 0.2), saturation: 1, brightness: 0.9, alpha: 1)
        let mutableAttributedText = NSMutableAttributedString(string: "\(fps)" + " FPS")
        mutableAttributedText.addAttributes([NSAttributedString.Key.foregroundColor : textColor], range: NSRange(location: 0, length: mutableAttributedText.length - 3))
        mutableAttributedText.addAttributes([NSAttributedString.Key.foregroundColor : UIColor.white], range: NSRange(location: mutableAttributedText.length - 3, length: 3))
        mutableAttributedText.addAttribute(NSAttributedString.Key.font, value: UIFont.systemFont(ofSize: 12), range: NSRange(location: 0, length: mutableAttributedText.length))
        self.attributedText = mutableAttributedText
    }
}

class AHFpsDetectorProxy: NSObject {
    let callBack: ((CFTimeInterval) -> Void)
    
    init(callBack: @escaping ((CFTimeInterval) -> Void)) {
        self.callBack = callBack
        super.init()
    }
    
    @objc
    func trigger(link: CADisplayLink) {
        self.callBack(link.timestamp)
    }
}
